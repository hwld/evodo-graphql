extend type Query {
  myTasks: [Task!]!
  myTask(taskId: ID!): Task!
}

extend type Mutation {
  createTask(input: CreateTaskInput!): CreateTaskPayload!
  deleteTask(id: ID!): DeleteTaskPayload!
  updateTaskTitle(input: UpdateTaskTitleInput!): UpdateTaskTitlePayload!
  updateTaskDone(input: UpdateTaskDoneInput!): UpdateTaskDonePayload!
  updateTaskDescription(
    input: UpdateTaskDescriptionInput!
  ): UpdateTaskDescriptionPayload!
}

type Task {
  id: ID!
  title: String!
  description: String!
  done: Boolean!
  author: User!
  memos(first: Int!, after: String): MemoConnection!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MemoConnection {
  edges: [MemoEdge!]!
  pageInfo: PageInfo!
}

type MemoEdge {
  node: TaskMemo!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
}

input CreateTaskInput {
  title: String! @constraint(minLength: 1, maxLength: 100)
}

type CreateTaskPayload {
  task: Task!
}

type DeleteTaskPayload {
  task: Task!
}

input UpdateTaskTitleInput {
  id: ID!
  title: String! @constraint(minLength: 1, maxLength: 100)
}

type UpdateTaskTitlePayload {
  task: Task!
}

input UpdateTaskDoneInput {
  id: ID!
  done: Boolean!
}

type UpdateTaskDonePayload {
  task: Task!
}

input UpdateTaskDescriptionInput {
  id: ID!
  description: String! @constraint(maxLength: 1000)
}

type UpdateTaskDescriptionPayload {
  task: Task!
}
